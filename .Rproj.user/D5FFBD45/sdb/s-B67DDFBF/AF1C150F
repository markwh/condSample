{
    "collab_server" : "",
    "contents" : "#' Derive arguments to distribution functions from distribution moments\n#'\n#' Returns a list of distribution parameters for R distribution calls.\n#'\n#' @param distr character. A distribution R recognizes (currently only supports\n#' 'norm', 'gamma', 'poisson', 'beta')\n#' @param moments a numeric vector, matrix, or data.frame with mean as column 1,\n#' variance as column 2, etc. Currently only first 2 moments are used.\n#' @return list of distribution parameters for R param calls.\n#' @export\n\nmomentsToDistArgs = function(distr, moments) {\n  if (is.vector(moments))\n    moments = matrix(moments, nrow = 1)\n  moments = as.matrix(moments)\n  switch(distr, norm = list(mean = moments[, 1], sd = sqrt(moments[, 2])),\n         gamma = list(shape = moments[, 1]^2/moments[, 2], scale = moments[, 2]/moments[, 1]),\n         pois = list(lambda = moments[, 1]),\n         beta = list(a = moments[1] * (moments[1] * (1 - moments[1]) / moments[2] - 1),\n                     b = (1 - moments[1]) * (moments[1] * (1 - moments[1]) / moments[2] - 1)))\n}\n\n\n#' Generate samples from conditional distribution.\n#'\n#' @param object a model object with a `predict()` method\n#' @param ... arguments to be passed to individual methods. These should always include :\n#'  `newdata` - to be passed to `predict()` function\n#'  `quantile` - either 'random' for stochastic sampling from conditional distribution or\n#'  a numeric value on (0, 1) specifying the quantile to return\n#' @return Numeric vector containing conditional random sample (if `quantile = 'random'`)\n#' or conditional quantiles from condition distribution defined by `object` and `newdata`\n#' seealso \\code{\\link{condlSample.lm}}\n#' @export\n\ncondlSample <- function(object, ...) {\n  UseMethod(\"condlSample\")\n}\n\n\n# Methods -----------------------------------------------------------------\n\n\n#' Generate samples from conditional distribution defined by a (generalized) linear model.\n#'\n#' @param object a lm object (including glm and gam). If a glm/gam, its family\n#' must be gaussian, binomial, poisson, or gamma.\n#' @param newdata As in predict.lm, predict.glm, etc. An optional data.frame to use for\n#' generating conditional distribution parameters. If omitted, the fitted values are used.\n#' @param quantile vector of quantiles to which the returned values will correspond.\n#' If the default, 'random' is not used, this must be numeric on (0, 1).\n#' @param ... Passed to `predict()` method\n#' @return Numeric vector containing conditional random sample (if `quantile = 'random'`)\n#' or conditional quantiles from condition distribution defined by `object` and `newdata`\n#' @export\n\ncondlSample.lm <- function(object, newdata, quantile = \"random\", ...) {\n\n  if (missing(newdata))\n    newdata <- markstats::getData(object)\n\n  if (quantile == \"random\")\n    quantile = runif(nrow(newdata)) else quantile = rep_len(quantile, nrow(newdata))\n\n    # get distribution from family(object)\n    fam = stats::family(object)$family\n    fams = c(\"binomial\", \"gaussian\", \"Gamma\", \"poisson\")\n    distrs = c(\"binom\", \"norm\", \"gamma\", \"pois\")\n    distr = distrs[which(fams == fam)]\n    if (identical(distr, integer(0)))\n      stop(\"Specified distribution not available.\")\n\n    # get moments via predict\n    preds = as.data.frame(predict(object = object, newdata = newdata, se.fit = TRUE, ...))\n    preds$var.pred = preds$se.fit^2 + var(residuals(object, type = \"response\"))\n    names(preds)[1] = \"fit\"\n\n    # get distribution parameters via moments\n    args0 = momentsToDistArgs(distr = distr, moments = preds[c(\"fit\", \"var.pred\")])\n\n    # sample from distribution\n    funname = paste0(\"q\", distr)\n    out = do.call(funname, c(list(p = quantile), args0))\n    out\n}\n\n\n#' Generate samples from a conditional distribution obtained from a model prediction\n#'\n#' @param object An rclm or rcgam object to use for predicting\n#' @param newdata a data.frame containing precictor variables to use for prediction\n#' @param retransform Should the predictions be returned as concentrations? (defaults to TRUE)\n#' @param ... Arguments passed to `predict.lm` or predict.gam function call\n#' @param smear Use Smearing estimator to correct transformation bias?\n#' @describeIn condlSample Method for rcgam objects\n#' @importFrom dplyr \"%>%\" mutate_\n#' @importFrom markstats condlSample\n#' @export\ncondlSample.rcgam <- function(object, newdata, flowcol = \"flow\",\n                              flow.units = \"ft3/s\", quantile, ...) {\n\n  if (!requireNamespace(\"rcmodel\", quietly = TRUE)) {\n    stop(\"rcmodel needed for this function to work. Please install it.\",\n         call. = FALSE)\n  }\n  # library(\"mgcv\")\n  if (missing(newdata))\n    newdata = markstats::getData(object)\n\n  assertthat::assert_that(is(newdata$Date, \"Date\"))\n  assertthat::assert_that(flowcol %in% names(newdata))\n  assertthat::assert_that(\"flow.units\" %in% names(newdata))\n  assertthat::assert_that(all(as.character(newdata$flow.units) == object$units[\"qunits\"]))\n\n  newdata <- newdata %>%\n    mutate_(q = ~ object$transform$qtrans(newdata[[flowcol]]),\n            time = ~ as.numeric(Date) - as.numeric(object$stats[\"datebar\"]),\n            doy = ~ as.numeric(format(Date, \"%j\")))\n  preds = NextMethod(\"condlSample\", object = object, newdata = newdata,\n                     quantile = quantile, smear = FALSE, retransform = FALSE,\n                     ...)\n  #   preds = condlSample.lm(object = object, newdata = newdata,\n  #                          quantile = quantile, smear = FALSE, retransform = FALSE)\n  preds = object$transform$cinvert(preds)\n  preds\n}\n\n\n#' Generate samples from a conditional distribution obtained from a model prediction\n#'\n#' @param object An rclm or rcgam object to use for predicting\n#' @param newdata a data.frame containing precictor variables to use for prediction\n#' @param retransform Should the predictions be returned as concentrations? (defaults to TRUE)\n#' @param ... Arguments passed to `predict.lm` or predict.gam function call\n#' @param smear Use Smearing estimator to correct transformation bias?\n#' @describeIn condlSample Method for rclm objects\n#' @importFrom dplyr \"%>%\" mutate_\n#' @importFrom markstats condlSample\n#' @export\ncondlSample.rclm <- function(object, newdata, flowcol = \"flow\",\n                             flow.units = \"ft3/s\", quantile, ...) {\n\n  if (!requireNamespace(\"rcmodel\", quietly = TRUE)) {\n    stop(\"rcmodel needed for this function to work. Please install it.\",\n         call. = FALSE)\n  }\n  # library(\"mgcv\")\n  if (missing(newdata))\n    newdata = markstats::getData(object)\n\n  assertthat::assert_that(is(newdata$Date, \"Date\"))\n  assertthat::assert_that(flowcol %in% names(newdata))\n  assertthat::assert_that(\"flow.units\" %in% names(newdata))\n  assertthat::assert_that(all(as.character(newdata$flow.units) == object$units[\"qunits\"]))\n\n  newdata <- newdata %>%\n    mutate_(q = ~ object$transform$qtrans(newdata[[flowcol]]),\n            time = ~ as.numeric(Date) - as.numeric(object$stats[\"datebar\"]),\n            doy = ~ as.numeric(format(Date, \"%j\")))\n  preds = NextMethod(\"condlSample\", object = object, newdata = newdata,\n                     quantile = quantile, smear = FALSE, retransform = FALSE,\n                     ...)\n  #   preds = condlSample.lm(object = object, newdata = newdata,\n  #                          quantile = quantile, smear = FALSE, retransform = FALSE)\n  preds = object$transform$cinvert(preds)\n  preds\n}\n\n",
    "created" : 1488657686009.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1689617993",
    "id" : "AF1C150F",
    "lastKnownWriteTime" : 1488657764,
    "last_content_update" : 1488657764054,
    "path" : "~/GoogleDrive/R/condSample/R/condlSample.R",
    "project_path" : "R/condlSample.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}